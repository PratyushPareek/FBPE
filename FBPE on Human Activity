{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12802,"status":"ok","timestamp":1651953046402,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"aAqVOUhZm8C2","outputId":"f2839ada-577b-41a7-8438-0c9bb04eadd0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting ipython-autotime\n","  Downloading ipython_autotime-0.3.1-py2.py3-none-any.whl (6.8 kB)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (from ipython-autotime) (5.5.0)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (4.8.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (4.4.2)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (57.4.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (0.7.5)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (5.1.1)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (1.0.18)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (0.8.1)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython->ipython-autotime) (2.6.1)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->ipython-autotime) (1.15.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->ipython-autotime) (0.2.5)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->ipython->ipython-autotime) (0.7.0)\n","Installing collected packages: ipython-autotime\n","Successfully installed ipython-autotime-0.3.1\n","time: 200 Âµs (started: 2022-05-07 19:50:46 +00:00)\n"]}],"source":["!pip install ipython-autotime\n","%load_ext autotime"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1651954242652,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"qVrFkRon0F4K","outputId":"6c68cb85-c67a-4dd2-cbbe-3c66d2d4dc33"},"outputs":[{"output_type":"stream","name":"stdout","text":["time: 113 ms (started: 2022-05-07 20:10:42 +00:00)\n"]}],"source":["import pandas as pd \n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","from sklearn.svm import SVC\n","from bisect import bisect_right\n","from sklearn import preprocessing \n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","from sklearn.multiclass import OneVsRestClassifier\n","import seaborn as sns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30080,"status":"ok","timestamp":1651953078315,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"dRqkolhJ0UY7","outputId":"8f74d4ee-8a49-45ee-a002-5ceaff4815f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n","time: 29.9 s (started: 2022-05-07 19:50:48 +00:00)\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1651953078317,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"3GEukobu0WbK","outputId":"83f28748-3771-4fdf-a7ef-790523ba5d5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Datasets/HumanActivity\n","time: 183 ms (started: 2022-05-07 19:51:18 +00:00)\n"]}],"source":["%cd drive/MyDrive/Datasets/HumanActivity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4228,"status":"ok","timestamp":1651953082528,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"lOZvc6ow0fJw","outputId":"326928c6-3793-40ee-e8b0-dae38277b626"},"outputs":[{"output_type":"stream","name":"stdout","text":["(7352, 562) (7352,)\n","(2947, 562) (2947,)\n","time: 4.06 s (started: 2022-05-07 19:51:18 +00:00)\n"]}],"source":["pd_train = pd.read_csv('train.csv')\n","pd_test = pd.read_csv('test.csv')\n","\n","x_train = np.array(pd_train.drop(['Activity'], axis=1))\n","y_train = np.array(pd_train['Activity'])\n","\n","x_test = np.array(pd_test.drop(['Activity'], axis=1))\n","y_test = np.array(pd_test['Activity'])\n","\n","print(x_train.shape,y_train.shape)\n","print(x_test.shape,y_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bC_ai8tm2CkB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651953325073,"user_tz":-330,"elapsed":501,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"5bb9de66-507a-4555-a61c-387d1b0be369"},"outputs":[{"output_type":"stream","name":"stdout","text":["time: 1.25 ms (started: 2022-05-07 19:55:25 +00:00)\n"]}],"source":["r = 0.2"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1651953084054,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"1KhePwXa17G1","outputId":"6307a3d0-8981-4003-e725-dc2a8c319bcf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear')"]},"metadata":{},"execution_count":9},{"output_type":"stream","name":"stdout","text":["time: 337 ms (started: 2022-05-07 19:51:24 +00:00)\n"]}],"source":["# linear model\n","model_linear = SVC(kernel='linear')\n","model_linear.fit(x_train[0:int(r*x_train.shape[0])], y_train[0:int(r*y_train.shape[0])])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":856,"status":"ok","timestamp":1651953084904,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"ep_NygCL2VZA","outputId":"a1438264-1993-40b8-b750-85b784d14810"},"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy: 0.8856464200882254 \n","\n","[[537   0   0   0   0   0]\n"," [  0 381 110   0   0   0]\n"," [  0  32 499   1   0   0]\n"," [  0   0   0 465  31   0]\n"," [  0   0   0  39 314  67]\n"," [  0   0   0  30  27 414]]\n","time: 500 ms (started: 2022-05-07 19:51:24 +00:00)\n"]}],"source":["# predict\n","y_pred = model_linear.predict(np.array(x_test))\n","\n","# accuracy\n","print(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n","\n","# cm\n","print(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":593,"status":"ok","timestamp":1651953085489,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"4-OxE6dX20Pw","outputId":"ed59ee32-1f4f-488f-fd0b-e224276c9173"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"]},"metadata":{},"execution_count":11},{"output_type":"stream","name":"stdout","text":["time: 551 ms (started: 2022-05-07 19:51:25 +00:00)\n"]}],"source":["# non-linear model\n","# using rbf kernel, C=1, default value of gamma\n","non_linear_model = SVC(kernel='rbf')\n","non_linear_model.fit(x_train[0:int(r*x_train.shape[0])], y_train[0:int(r*y_train.shape[0])])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3011,"status":"ok","timestamp":1651953088495,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"},"user_tz":-330},"id":"O_eT5Wog3Btd","outputId":"1910221d-513d-42a9-fb2c-3a7984eede49"},"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy: 0.7641669494401085 \n","\n","[[537   0   0   0   0   0]\n"," [ 76 310 105   0   0   0]\n"," [ 38  47 446   1   0   0]\n"," [ 58   0   0 323 114   1]\n"," [  9   0   0   3 408   0]\n"," [ 59   0   0  53 131 228]]\n","time: 2.9 s (started: 2022-05-07 19:51:25 +00:00)\n"]}],"source":["# predict\n","y_pred = non_linear_model.predict(x_test)\n","\n","# accuracy\n","print(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n","\n","# cm\n","print(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TIvbXVAI3PoX"},"outputs":[],"source":["def prepData(points):\n","    m = len(points)\n","    n = len(points[0])\n","    M  = []\n","    for i in range(n):\n","        t = [(points[j][i],j) for j in range(m)]\n","        t.sort()\n","        M.append(t)\n","    \n","    return M\n","\n","\n","def gradientsFB(points,M,r,dx=0.5,mn=25):\n","    n = len(M)\n","    m = len(points)\n","    mx = 1e9\n","\n","    gradients = []\n","    for p in points:\n","        g = []\n","        for i in range(n):\n","            pF,pB = p.copy(),p.copy()\n","            pF[i] += dx\n","            pB[i] -= dx\n","            \n","            H = bisect_right(M[i],(pF[i],mx)) - bisect_right(M[i],(p[i],mx))\n","            L = bisect_right(M[i],(p[i],mx)) - bisect_right(M[i],(pB[i],mx))\n","\n","            #g.append((H-L)/(min(H,L) if min(H,L)>minSc else mx))\n","            #g.append((H-L)/(max(H,L) if min(H,L)>minSc else mx))\n","            if min(H,L)>mn:\n","               g.append((H-L)/max(H,L))\n","            else:\n","               g.append(0)\n","        \n","        gd = 0\n","        for i in g:\n","            gd += i**2\n","        gradients.append(gd)\n","    \n","    return gradients\n","\n","def gradientsIM(points,M,r,dx=0.5,mn=25):\n","    n = len(M)\n","    m = len(points)\n","    mx = 1e9 \n","\n","    gradients = []\n","    for p in points:\n","        g = []\n","        for i in range(n):\n","            pF,pB = p.copy(),p.copy()\n","            pF[i] += dx\n","            pB[i] -= dx\n","            \n","            H = bisect_right(M[i],(pF[i],mx)) - bisect_right(M[i],(p[i],mx))\n","            L = bisect_right(M[i],(p[i],mx)) - bisect_right(M[i],(pB[i],mx))\n","\n","            #g.append((H-L)/(min(H,L) if min(H,L)>minSc else mx))\n","            #g.append((H-L)/(max(H,L) if min(H,L)>minSc else mx))\n","            if max(H,L)>0:\n","                g.append((H-L)/max(H,L))\n","            else:\n","                g.append((H-L))\n","        \n","        gd = 0\n","        for i in g:\n","            gd += i**2\n","        gradients.append(gd)\n","    \n","    return gradients\n","\n","def divideByClass(x,y):\n","    classes = np.unique(y)\n","    #print(classes)\n","    X = []\n","    for c in classes:\n","        X.append([])\n","\n","    for i in range(len(x)):\n","        t = -1\n","        for j in range(len(classes)):\n","            if classes[j] == y[i]:\n","                t = j\n","                break\n","\n","        X[t].append(x[i])\n","\n","    return X,classes\n","\n","\n","def FBPESampling(x,y,r):\n","    x = np.array(x)\n","    X,classes = divideByClass(x,y)\n","\n","    red = []\n","    for i in range(len(X)):\n","        xc = X[i]\n","        preprocessing.StandardScaler().fit(xc)\n","        M = prepData(xc)\n","        g = gradientsFB(xc,M,r)\n","        gd = ((g[j],j) for j in range(len(g)))\n","        gd = sorted(gd)\n","        gd.reverse()\n","        \n","        x_ext = [xc[gd[j][1]] for j in range(int(len(g)*r))]\n","        ext = [(x_ext[j],classes[i]) for j in range(len(x_ext))]\n","        red.extend(ext)\n","\n","        print(i,len(red))\n","\n","    np.random.shuffle(red)\n","\n","    x_train_red = [red[i][0] for i in range(len(red))]\n","    y_train_red = [red[i][1] for i in range(len(red))]\n","\n","    return x_train_red, y_train_red\n","\n","def IMPESampling(x,y,r):\n","    x = np.array(x)\n","    X,classes = divideByClass(x,y)\n","\n","    red = []\n","    for i in range(len(X)):\n","        xc = X[i]\n","        preprocessing.StandardScaler().fit(xc)\n","        M = prepData(xc)\n","        g = gradientsIM(xc,M,r)\n","        gd = ((g[j],j) for j in range(len(g)))\n","        gd = sorted(gd)\n","        #gd.reverse()\n","        \n","        x_ext = [xc[gd[j][1]] for j in range(int(len(g)*r))]\n","        ext = [(x_ext[j],classes[i]) for j in range(len(x_ext))]\n","        red.extend(ext)\n","\n","        print(i,len(red))\n","\n","    np.random.shuffle(red)\n","\n","    x_train_red = [red[i][0] for i in range(len(red))]\n","    y_train_red = [red[i][1] for i in range(len(red))]\n","\n","    return x_train_red, y_train_red"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0MfVu-eh4u0S","outputId":"8738e538-da2d-4434-dbb9-9431a1e9661a","executionInfo":{"status":"ok","timestamp":1651953411554,"user_tz":-330,"elapsed":77802,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["0 281\n","1 538\n","2 812\n","3 1057\n","4 1254\n","5 1468\n","1468\n","562\n","1468\n","time: 1min 17s (started: 2022-05-07 19:55:34 +00:00)\n"]}],"source":["x_train_red, y_train_red = IMPESampling(x_train,y_train,r)\n","\n","print(len(x_train_red))\n","print(len(x_train_red[0]))\n","print(len(y_train_red))\n","#print(len(y_train_red[0]))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SXm_9y-y5Xob","executionInfo":{"status":"ok","timestamp":1651953411556,"user_tz":-330,"elapsed":49,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"cba784fe-439a-449a-cfa8-c761ad498a04"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear')"]},"metadata":{},"execution_count":20},{"output_type":"stream","name":"stdout","text":["time: 152 ms (started: 2022-05-07 19:56:51 +00:00)\n"]}],"source":["# linear model\n","model_linear = SVC(kernel='linear')\n","model_linear.fit(x_train_red, y_train_red)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"psIOtChH5Yax","executionInfo":{"status":"ok","timestamp":1651953411557,"user_tz":-330,"elapsed":15,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"cd4e0d69-6b8a-45a6-da9f-69327bf1c716"},"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy: 0.9195792331184255 \n","\n","[[537   0   0   0   0   0]\n"," [  0 432  57   0   0   2]\n"," [  0  26 506   0   0   0]\n"," [  0   0   0 464  10  22]\n"," [  0   0   0   7 390  23]\n"," [  0   0   0  62  28 381]]\n","time: 263 ms (started: 2022-05-07 19:56:51 +00:00)\n"]}],"source":["# predict\n","y_pred = model_linear.predict(np.array(x_test))\n","\n","# accuracy\n","print(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n","\n","# cm\n","print(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bsIZOXCP5a7E","executionInfo":{"status":"ok","timestamp":1651953412349,"user_tz":-330,"elapsed":801,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"82336e89-cd1b-4ef2-d3ed-7c3772089028"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC()"]},"metadata":{},"execution_count":22},{"output_type":"stream","name":"stdout","text":["time: 324 ms (started: 2022-05-07 19:56:52 +00:00)\n"]}],"source":["# non-linear model\n","# using rbf kernel, C=1, default value of gamma\n","non_linear_model = SVC(kernel='rbf')\n","non_linear_model.fit(x_train_red, y_train_red)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6PxavqmI5dlm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651953413380,"user_tz":-330,"elapsed":1035,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"08f30ccb-05a6-475a-f61c-4a0da09fc9e4"},"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy: 0.8751272480488632 \n","\n","[[537   0   0   0   0   0]\n"," [  0 407  82   0   0   2]\n"," [  0  91 441   0   0   0]\n"," [  0   0   0 494   2   0]\n"," [  0   0   0 128 280  12]\n"," [  0   0   0  50   1 420]]\n","time: 1.4 s (started: 2022-05-07 19:56:52 +00:00)\n"]}],"source":["# predict\n","y_pred = non_linear_model.predict(x_test)\n","\n","# accuracy\n","print(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n","\n","# cm\n","print(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))"]},{"cell_type":"code","source":["X, classes = divideByClass(x_train,y_train)\n","X_red, classes = divideByClass(x_train_red, y_train_red)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FngIzQpKHZOI","executionInfo":{"status":"ok","timestamp":1651953772841,"user_tz":-330,"elapsed":7,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"5a2560e8-d975-4bb1-dd4f-d242f1843ea2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["time: 72.9 ms (started: 2022-05-07 20:02:53 +00:00)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"9qCaAZ0KlHXG","executionInfo":{"status":"ok","timestamp":1651954574805,"user_tz":-330,"elapsed":2053,"user":{"displayName":"PRATYUSH PAREEK","userId":"13301930471528159976"}},"outputId":"7e0b80f1-db30-4b65-ef84-8e84aa72bb4f"},"outputs":[{"output_type":"stream","name":"stdout","text":["(6, 3)\n"]},{"output_type":"stream","name":"stderr","text":["*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["time: 1.48 s (started: 2022-05-07 20:16:13 +00:00)\n"]}],"source":["colors = np.array(sns.color_palette(\"hls\", len(classes)))\n","print(colors.shape)\n","for i in range(len(classes)):\n","    pca = PCA(n_components=2)\n","    transformed = pca.fit_transform(X[i])\n","    transformed_X = [transformed[j][0] for j in range(len(transformed))]\n","    transformed_Y = [transformed[j][1] for j in range(len(transformed))]\n","    plt.scatter(transformed_X,transformed_Y,c=colors[i])\n","plt.grid() \n","#plt.figure(figsize=(10,10))\n","#for c in classes:\n","#    plt.scatter(transformed[:,0][y_train==c], transformed[:,1][y_train==c])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ziKvuc7F6xI5","executionInfo":{"status":"ok","timestamp":1651018754834,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sanskar Patro","userId":"16144140088166693399"}},"outputId":"d4a37f66-74bb-451e-fe83-ee96667cb804"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0.59581138 0.2516909 ]\n","(7352, 2)\n","time: 2.62 ms (started: 2022-04-27 00:19:04 +00:00)\n"]}],"source":["print(pca.explained_variance_ratio_)\n","print(transformed.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OTAMjZsl6JM4","executionInfo":{"status":"ok","timestamp":1651018754835,"user_tz":-330,"elapsed":27,"user":{"displayName":"Sanskar Patro","userId":"16144140088166693399"}},"outputId":"fe275cdb-7d14-4c58-8719-40c52db73d88"},"outputs":[{"output_type":"stream","name":"stdout","text":["(7352, 2)\n","time: 1.92 ms (started: 2022-04-27 00:19:04 +00:00)\n"]}],"source":["print(transformed.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-LhfUSvnnTB4","executionInfo":{"status":"ok","timestamp":1651018754836,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sanskar Patro","userId":"16144140088166693399"}},"outputId":"be5a427d-cb82-4747-ee6d-ffe37c295987"},"outputs":[{"output_type":"stream","name":"stdout","text":["(7352, 562)\n","time: 1.76 ms (started: 2022-04-27 00:19:04 +00:00)\n"]}],"source":["print(x_train.shape)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"FBPE on Human Activity","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}